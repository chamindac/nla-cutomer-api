on: [workflow_dispatch, push]
name: CustomerAPI.CI


  
jobs:
  build-and-package:
    runs-on: ubuntu-latest
    
    env:
      CLUSTER_RESOURCE_GROUP: "rg-ifsaks"
      NAMESPACE: "dev"
      APP_NAME: "customerapi"
      IMAGE_SECRET: "customerapiimgsec"

    steps:
    - uses: actions/checkout@master

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.302'
        
    - name: Build with dotnet
      uses: Amadevus/pwsh-script@v2.0.1
      id: dotnet-build
      with:
        script: dir "*.csproj" -Recurse | %{dotnet build  $PSItem.FullName}
    - run: echo '${{ steps.dotnet-build.outputs.result }}'
    
    - name: Test with dotnet
      uses: Amadevus/pwsh-script@v2.0.1
      id: dotnet-test
      with:
        script: |
                 dir "*.Tests.csproj" -Recurse | %{dotnet test  $PSItem.FullName --logger ("trx;LogFileName=" + ($PSItem.Name -replace ".csproj", ".trx")) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --no-restore --no-build}
                 dir "*.Tests.trx" -Recurse | %{ copy-item -Path $PSItem.FullName };
    - run: echo '${{ steps.dotnet-test.outputs.result }}'
    
    - name: Upload Code Coverage
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
        #files: ./coverage1.xml,./coverage2.xml # optional
        #flags: unittests # optional
        name: nla-customer-api # optional
        #fail_ci_if_error: true # optional (default = false)
        #verbose: true # optional (default = false)
    
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()    # run this step even if previous step failed
      with:
        name: Cutomer API Tests            # Name of the check run which will be created
        path: ./*.Tests.trx    # Path to test results
        reporter: dotnet-trx        # Format of test results
    
    - name: ACR build
      id: acr
      uses: ams0/acr-task-github-action@v2
      with:
        service_principal: ${{ secrets.service_principal }}
        service_principal_password: ${{ secrets.service_principal_password }}
        tenant: ${{ secrets.tenant }}
        registry: acrifsaks.azurecr.io
        repository: nla
        image: customerapi
        tag: ${{ github.sha }}
        git_access_token: ${{ secrets.GITHUB_TOKEN }}
        dockerfile: Dockerfile
    
    - name: Set K8S Context
      id: setcontext
      uses: azure/k8s-set-context@v1
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.K8S_CONFIG }}
    
    # Create namespace if doesn't exist
    - name: Create K8s namespace
      id: set-namespace
      run: |
            kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
    
    # Create image pull secret for ACR
    - name: ACR Image Pull Secret
      uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.acr }}
        container-registry-username: ${{ secrets.service_principal }}
        container-registry-password: ${{ secrets.service_principal_password }}
        secret-name: ${{ env.IMAGE_SECRET }}
        namespace: ${{ env.NAMESPACE }}
        arguments: --force true
        
    - name: Deploy ingress controller
      uses: Azure/k8s-deploy@v1.4
      with:
        namespace: ingress-nginx
        manifests: |
            manifests/ingress-controller.yml
        kubectl-version: 'latest'
    
    - name: Deploy customer api
      uses: Azure/k8s-deploy@v1.4
      with:
        namespace: ${{ env.NAMESPACE }}
        images: acrifsaks.azurecr.io/nla/customerapi:${{ github.sha }}
        imagepullsecrets: |
            ${{ env.IMAGE_SECRET }}
        manifests: |
            manifests/deployment.yml
        kubectl-version: 'latest'
    
    - name: Deploy customer api service
      uses: Azure/k8s-deploy@v1.4
      with:
        namespace: ${{ env.NAMESPACE }}
        manifests: |
            manifests/service.yml
            manifests/ingress.yml
        kubectl-version: 'latest'

